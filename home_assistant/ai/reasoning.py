"""
AI Reasoning Engine - —É–º–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –≤–Ω–µ—à–Ω–∏–º–∏ LLM (OpenAI) –∏ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ (Ollama).
–í–∫–ª—é—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥.
"""

import asyncio
import json
import re
from typing import Dict, List, Optional, Any, Union
from datetime import datetime
from dataclasses import dataclass
import structlog

from ..core.config import HomeAssistantConfig
from ..core.events_simple import EventSystem
from ..storage.database import DatabaseManager

logger = structlog.get_logger(__name__)


@dataclass
class ReasoningContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI reasoning."""
    user_input: str
    session_id: str
    conversation_history: List[Dict[str, Any]]
    available_devices: List[Dict[str, Any]]
    current_time: datetime
    user_location: Optional[str] = None
    privacy_mode: bool = False


@dataclass
class ActionPlan:
    """–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    intent: str  # –ù–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    confidence: float  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏
    actions: List[Dict[str, Any]]  # –°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
    requires_confirmation: bool = False
    explanation: str = ""  # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π


class LLMProvider:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ LLM."""
    
    async def generate_response(self, prompt: str, **kwargs) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM."""
        raise NotImplementedError
    
    async def analyze_intent(self, user_input: str, context: ReasoningContext) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        raise NotImplementedError


class OpenAIProvider(LLMProvider):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è OpenAI API."""
    
    def __init__(self, api_key: str, model: str = "gpt-4"):
        self.api_key = api_key
        self.model = model
        self._logger = structlog.get_logger(__name__)
    
    async def generate_response(self, prompt: str, **kwargs) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI API."""
        try:
            # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–∑–æ–≤–∞ OpenAI API
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è openai library
            
            self._logger.info("Generating OpenAI response", model=self.model)
            
            # –ü—Ä–∏–º–µ—Ä —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if "–≤–∫–ª—é—á–∏ —Å–≤–µ—Ç" in prompt.lower() or "turn on light" in prompt.lower():
                return "–ö–æ–Ω–µ—á–Ω–æ! –í–∫–ª—é—á–∞—é —Å–≤–µ—Ç –≤ –≥–æ—Å—Ç–∏–Ω–æ–π. –£–º–Ω–∞—è –ª–∞–º–ø–∞ —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–µ–Ω–∞ —Å —è—Ä–∫–æ—Å—Ç—å—é 80%."
            
            elif "–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞" in prompt.lower() or "weather" in prompt.lower():
                return "–°–µ–π—á–∞—Å –Ω–∞ —É–ª–∏—Ü–µ +15¬∞C, –Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å. –í–µ—á–µ—Ä–æ–º –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å."
            
            elif "–≤–∫–ª—é—á–∏ –º—É–∑—ã–∫—É" in prompt.lower() or "play music" in prompt.lower():
                return "–ó–∞–ø—É—Å–∫–∞—é –≤–∞—à—É –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É –Ω–∞ Spotify. –í–∫–ª—é—á–∞—é –ø–ª–µ–π–ª–∏—Å—Ç '–î–æ–º–∞—à–Ω—è—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞'."
            
            elif "—á—Ç–æ —É–º–µ–µ—à—å" in prompt.lower() or "what can you do" in prompt.lower():
                return """–Ø —É–º–µ—é –º–Ω–æ–≥–æ–µ! –ú–æ–≥—É:
                
üè† –£–ø—Ä–∞–≤–ª—è—Ç—å —É–º–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ (—Å–≤–µ—Ç, —Ä–æ–∑–µ—Ç–∫–∏, –¥–∞—Ç—á–∏–∫–∏)
üéµ –í–∫–ª—é—á–∞—Ç—å –º—É–∑—ã–∫—É —á–µ—Ä–µ–∑ Spotify
üå§Ô∏è –°–æ–æ–±—â–∞—Ç—å –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑
üó£Ô∏è –í–µ—Å—Ç–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
üîß –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
üîí –†–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–æ–∫–∞–ª—å–Ω–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ

–ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ!"""
            
            else:
                return f"–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: '{prompt}'. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –Ω–∞–π–¥—É –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ."
        
        except Exception as e:
            self._logger.error("OpenAI API error", error=str(e))
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
    
    async def analyze_intent(self, user_input: str, context: ReasoningContext) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ OpenAI."""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: "{user_input}"

–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {[d['name'] for d in context.available_devices]}

–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
- intent: —Ç–∏–ø –Ω–∞–º–µ—Ä–µ–Ω–∏—è (device_control, information, conversation, music, weather)
- confidence: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 0-1
- target_devices: —Å–ø–∏—Å–æ–∫ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- parameters: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
- response: –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

–ü—Ä–∏–º–µ—Ä:
{{"intent": "device_control", "confidence": 0.95, "target_devices": ["light_001"], "parameters": {{"action": "turn_on", "brightness": 80}}, "response": "–í–∫–ª—é—á–∞—é —Å–≤–µ—Ç"}}
"""
            
            # –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            intent_data = self._analyze_user_intent(user_input, context)
            
            return intent_data
            
        except Exception as e:
            self._logger.error("Intent analysis error", error=str(e))
            return {
                "intent": "conversation",
                "confidence": 0.5,
                "target_devices": [],
                "parameters": {},
                "response": "–ù–µ –º–æ–≥—É —Ç–æ—á–Ω–æ –ø–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å, –Ω–æ –ø–æ–ø—Ä–æ–±—É—é –ø–æ–º–æ—á—å."
            }
    
    def _analyze_user_intent(self, user_input: str, context: ReasoningContext) -> Dict[str, Any]:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è OpenAI)."""
        input_lower = user_input.lower()
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–æ–º
        if any(word in input_lower for word in ["—Å–≤–µ—Ç", "–ª–∞–º–ø–∞", "light", "–≤–∫–ª—é—á–∏", "–≤—ã–∫–ª—é—á–∏", "turn on", "turn off"]):
            action = "turn_on" if any(word in input_lower for word in ["–≤–∫–ª—é—á–∏", "turn on"]) else "turn_off"
            light_devices = [d for d in context.available_devices if d.get("device_type") == "light"]
            
            return {
                "intent": "device_control",
                "confidence": 0.9,
                "target_devices": [d["id"] for d in light_devices[:1]] if light_devices else [],
                "parameters": {"action": action, "brightness": 80 if action == "turn_on" else 0},
                "response": f"{'–í–∫–ª—é—á–∞—é' if action == 'turn_on' else '–í—ã–∫–ª—é—á–∞—é'} —Å–≤–µ—Ç"
            }
        
        # –ú—É–∑—ã–∫–∞
        elif any(word in input_lower for word in ["–º—É–∑—ã–∫–∞", "–ø–µ—Å–Ω—è", "–ø–ª–µ–π–ª–∏—Å—Ç", "music", "song", "play"]):
            return {
                "intent": "music",
                "confidence": 0.85,
                "target_devices": [],
                "parameters": {"service": "spotify", "action": "play", "query": "–¥–æ–º–∞—à–Ω—è—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"},
                "response": "–í–∫–ª—é—á–∞—é –º—É–∑—ã–∫—É –Ω–∞ Spotify"
            }
        
        # –ü–æ–≥–æ–¥–∞
        elif any(word in input_lower for word in ["–ø–æ–≥–æ–¥–∞", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "weather", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"]):
            return {
                "intent": "weather",
                "confidence": 0.9,
                "target_devices": [],
                "parameters": {"location": "current"},
                "response": "–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ"
            }
        
        # –û–±—ã—á–Ω–∞—è –±–µ—Å–µ–¥–∞
        else:
            return {
                "intent": "conversation",
                "confidence": 0.7,
                "target_devices": [],
                "parameters": {},
                "response": "–ü–æ–Ω—è–ª, –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å"
            }


class OllamaProvider(LLMProvider):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ Ollama."""
    
    def __init__(self, model: str = "llama2:7b", base_url: str = "http://localhost:11434"):
        self.model = model
        self.base_url = base_url
        self._logger = structlog.get_logger(__name__)
    
    async def generate_response(self, prompt: str, **kwargs) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Ollama."""
        try:
            # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–∑–æ–≤–∞ Ollama API
            self._logger.info("Generating Ollama response", model=self.model)
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
            if "–≤–∫–ª—é—á–∏ —Å–≤–µ—Ç" in prompt.lower():
                return "–í–∫–ª—é—á–∞—é —Å–≤–µ—Ç."
            elif "–º—É–∑—ã–∫–∞" in prompt.lower():
                return "–ó–∞–ø—É—Å–∫–∞—é –º—É–∑—ã–∫—É."
            elif "–ø–æ–≥–æ–¥–∞" in prompt.lower():
                return "–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–≥–æ–¥—É."
            else:
                return "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å."
            
        except Exception as e:
            self._logger.error("Ollama API error", error=str(e))
            return "–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏."
    
    async def analyze_intent(self, user_input: str, context: ReasoningContext) -> Dict[str, Any]:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏."""
        return {
            "intent": "conversation",
            "confidence": 0.6,
            "target_devices": [],
            "parameters": {},
            "response": "–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å."
        }


class ReasoningEngine:
    """–û—Å–Ω–æ–≤–Ω–æ–π –¥–≤–∏–∂–æ–∫ AI reasoning."""
    
    def __init__(self, config: HomeAssistantConfig, event_system: EventSystem,
                 db_manager: DatabaseManager, communication_hub):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Reasoning Engine.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
            event_system: –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            communication_hub: –•–∞–± —Å–≤—è–∑–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
        """
        self.config = config
        self.event_system = event_system
        self.db_manager = db_manager
        self.communication_hub = communication_hub
        self._logger = structlog.get_logger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ LLM
        self._init_llm_providers()
    
    def _init_llm_providers(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ LLM."""
        self.providers = {}
        
        # OpenAI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        if self.config.ai.openai_api_key:
            self.providers["openai"] = OpenAIProvider(
                api_key=self.config.ai.openai_api_key,
                model=self.config.ai.openai_model
            )
        
        # Ollama –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        if self.config.ai.local_llm_enabled:
            self.providers["ollama"] = OllamaProvider(
                model=self.config.ai.local_llm_model,
                base_url=self.config.ai.local_llm_url
            )
        
        self._logger.info("LLM providers initialized", providers=list(self.providers.keys()))
    
    def _get_active_provider(self) -> Optional[LLMProvider]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ LLM."""
        # –í –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
        if self.config.privacy.enabled and self.config.privacy.force_local_processing:
            return self.providers.get("ollama")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: OpenAI -> Ollama
        return self.providers.get("openai") or self.providers.get("ollama")
    
    async def process_user_input(self, user_input: str, session_id: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.
        
        Args:
            user_input: –¢–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        """
        try:
            self._logger.info("Processing user input", 
                            user_input=user_input, session_id=session_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.db_manager.save_conversation(
                session_id=session_id,
                message_type="user",
                content=user_input
            )
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = await self._build_context(user_input, session_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            provider = self._get_active_provider()
            if not provider:
                response = "LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."
                await self.db_manager.save_conversation(
                    session_id=session_id,
                    message_type="assistant",
                    content=response
                )
                return {"response": response, "actions": []}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
            intent_result = await provider.analyze_intent(user_input, context)
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
            action_plan = await self._create_action_plan(intent_result, context)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
            execution_results = await self._execute_actions(action_plan, session_id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            final_response = await self._generate_final_response(
                action_plan, execution_results, provider, context
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            await self.db_manager.save_conversation(
                session_id=session_id,
                message_type="assistant",
                content=final_response,
                metadata={
                    "intent": intent_result.get("intent"),
                    "confidence": intent_result.get("confidence"),
                    "actions_count": len(action_plan.actions)
                }
            )
            
            return {
                "response": final_response,
                "actions": execution_results,
                "intent": intent_result.get("intent"),
                "confidence": intent_result.get("confidence")
            }
            
        except Exception as e:
            self._logger.error("Error processing user input", error=str(e))
            error_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            
            await self.db_manager.save_conversation(
                session_id=session_id,
                message_type="assistant",
                content=error_response
            )
            
            return {"response": error_response, "actions": []}
    
    async def _build_context(self, user_input: str, session_id: str) -> ReasoningContext:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è reasoning."""
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        conversation_history = await self.db_manager.get_conversation_history(session_id, limit=10)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        available_devices = await self.db_manager.get_all_devices()
        
        return ReasoningContext(
            user_input=user_input,
            session_id=session_id,
            conversation_history=conversation_history,
            available_devices=available_devices,
            current_time=datetime.utcnow(),
            privacy_mode=self.config.privacy.enabled
        )
    
    async def _create_action_plan(self, intent_result: Dict[str, Any], 
                                 context: ReasoningContext) -> ActionPlan:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è."""
        intent = intent_result.get("intent", "conversation")
        actions = []
        
        if intent == "device_control":
            # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
            for device_id in intent_result.get("target_devices", []):
                actions.append({
                    "type": "device_command",
                    "device_id": device_id,
                    "command": intent_result.get("parameters", {}).get("action", "toggle"),
                    "params": intent_result.get("parameters", {})
                })
        
        elif intent == "music":
            # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π
            actions.append({
                "type": "integration_command",
                "service": "spotify",
                "command": "play",
                "params": intent_result.get("parameters", {})
            })
        
        elif intent == "weather":
            # –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
            actions.append({
                "type": "integration_command",
                "service": "weather",
                "command": "get_current",
                "params": intent_result.get("parameters", {})
            })
        
        return ActionPlan(
            intent=intent,
            confidence=intent_result.get("confidence", 0.5),
            actions=actions,
            explanation=intent_result.get("response", "")
        )
    
    async def _execute_actions(self, action_plan: ActionPlan, 
                              session_id: str) -> List[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π."""
        results = []
        
        for action in action_plan.actions:
            try:
                result = {"action": action, "success": False, "error": None}
                
                if action["type"] == "device_command":
                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    success = await self.communication_hub.send_device_command(
                        device_id=action["device_id"],
                        command=action["command"],
                        params=action.get("params", {})
                    )
                    result["success"] = success
                    
                    if success:
                        self._logger.info("Device command executed", 
                                        device_id=action["device_id"],
                                        command=action["command"])
                    else:
                        result["error"] = "Failed to execute device command"
                
                elif action["type"] == "integration_command":
                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
                    success = await self._execute_integration_command(action)
                    result["success"] = success
                    
                    if not success:
                        result["error"] = "Integration command failed"
                
                results.append(result)
                
            except Exception as e:
                self._logger.error("Action execution error", action=action, error=str(e))
                results.append({
                    "action": action,
                    "success": False,
                    "error": str(e)
                })
        
        return results
    
    async def _execute_integration_command(self, action: Dict[str, Any]) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."""
        service = action.get("service")
        command = action.get("command")
        
        try:
            if service == "spotify":
                # –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã Spotify
                self._logger.info("Executing Spotify command", command=command)
                return True
            
            elif service == "weather":
                # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã
                self._logger.info("Getting weather information")
                return True
            
            return False
            
        except Exception as e:
            self._logger.error("Integration command error", service=service, error=str(e))
            return False
    
    async def _generate_final_response(self, action_plan: ActionPlan,
                                      execution_results: List[Dict[str, Any]],
                                      provider: LLMProvider,
                                      context: ReasoningContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ—É–¥–∞—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            successful_actions = sum(1 for r in execution_results if r["success"])
            total_actions = len(execution_results)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            if total_actions == 0:
                # –û–±—ã—á–Ω–∞—è –±–µ—Å–µ–¥–∞ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π
                prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: '{context.user_input}'. –û—Ç–≤–µ—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ."
            else:
                # –û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
                actions_summary = []
                for result in execution_results:
                    action = result["action"]
                    if result["success"]:
                        if action["type"] == "device_command":
                            actions_summary.append(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É {action['device_id']}: {action['command']}")
                        elif action["type"] == "integration_command":
                            actions_summary.append(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {action['service']}: {action['command']}")
                    else:
                        actions_summary.append(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
                prompt = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–æ—Å–∏–ª: '{context.user_input}'

–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
{chr(10).join(actions_summary)}

–£—Å–ø–µ—à–Ω–æ: {successful_actions}/{total_actions}

–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
"""
            
            response = await provider.generate_response(prompt)
            return response
            
        except Exception as e:
            self._logger.error("Response generation error", error=str(e))
            return action_plan.explanation or "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."