"""
–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Home Assistant AI.
"""

import asyncio
import signal
import sys
import uvicorn
from typing import Dict, Any, Optional
from pathlib import Path
import structlog

from .config import HomeAssistantConfig
from .events_simple import EventSystem
from ..storage.database import DatabaseManager
from ..communication.hub import CommunicationHub
from ..ai.reasoning import ReasoningEngine
from ..api.main import create_app

logger = structlog.get_logger(__name__)


class LifecycleManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞."""
        self.components: Dict[str, Any] = {}
        self.running = False
        self._shutdown_event = asyncio.Event()
        self._logger = structlog.get_logger(__name__)
    
    def register_component(self, name: str, component: Any) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.
        
        Args:
            name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            component: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        """
        self.components[name] = component
        self._logger.debug("Component registered", name=name)
    
    async def shutdown(self) -> None:
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
        if not self.running:
            return
        
        self._logger.info("Shutting down all components")
        self.running = False
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for name, component in reversed(list(self.components.items())):
            try:
                if hasattr(component, 'stop'):
                    await component.stop()
                elif hasattr(component, 'shutdown'):
                    await component.shutdown()
                self._logger.info("Component stopped", name=name)
            except Exception as e:
                self._logger.error("Error stopping component", 
                                 name=name, error=str(e))
        
        self._shutdown_event.set()


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    structlog.configure(
        processors=[
            structlog.stdlib.filter_by_level,
            structlog.stdlib.add_logger_name,
            structlog.stdlib.add_log_level,
            structlog.stdlib.PositionalArgumentsFormatter(),
            structlog.processors.TimeStamper(fmt="iso"),
            structlog.dev.ConsoleRenderer()
        ],
        wrapper_class=structlog.stdlib.BoundLogger,
        logger_factory=structlog.stdlib.LoggerFactory(),
        cache_logger_on_first_use=True,
    )
    
    logger = structlog.get_logger(__name__)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = HomeAssistantConfig()
        
        print("üè† –ó–∞–ø—É—Å–∫ Home Assistant AI...")
        print(f"üìä Debug —Ä–µ–∂–∏–º: {config.debug}")
        print(f"üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.get_database_url()}")
        print(f"ü§ñ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {'OpenAI' if config.ai.openai_api_key else '–õ–æ–∫–∞–ª—å–Ω—ã–π'}")
        print(f"üîí Privacy —Ä–µ–∂–∏–º: {config.privacy.enabled}")
        print(f"üåê API —Å–µ—Ä–≤–µ—Ä: {config.api.host}:{config.api.port}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path(config.data_dir).mkdir(parents=True, exist_ok=True)
        Path(config.config_dir).mkdir(parents=True, exist_ok=True)
        Path("logs").mkdir(exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
        event_system = EventSystem()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π")
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        db_manager = DatabaseManager(config)
        await db_manager.initialize()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        # Communication Hub
        communication_hub = CommunicationHub(config, event_system, db_manager)
        await communication_hub.start()
        print("‚úÖ Communication Hub")
        
        # AI Reasoning Engine
        reasoning_engine = ReasoningEngine(config, event_system, db_manager, communication_hub)
        print("‚úÖ AI Reasoning Engine")
        
        # Lifecycle Manager
        lifecycle_manager = LifecycleManager()
        lifecycle_manager.register_component("event_system", event_system)
        lifecycle_manager.register_component("db_manager", db_manager)
        lifecycle_manager.register_component("communication_hub", communication_hub)
        lifecycle_manager.register_component("reasoning_engine", reasoning_engine)
        print("‚úÖ Lifecycle Manager")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ–∫–∞ –±–µ–∑ voice_manager)
        app = create_app(
            config=config,
            event_system=event_system,
            db_manager=db_manager,
            communication_hub=communication_hub,
            reasoning_engine=reasoning_engine,
            voice_manager=None  # –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ
        )
        print("‚úÖ REST API")
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        print("\nüîç –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        devices = await communication_hub.discover_all_devices()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        print("\nüîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")
        
        # Spotify –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è)
        await db_manager.save_integration({
            "id": "spotify_main",
            "name": "Spotify",
            "type": "spotify",
            "enabled": True,
            "config": {"client_id": "demo", "client_secret": "demo"},
            "credentials": {}
        })
        
        # Weather –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è)
        await db_manager.save_integration({
            "id": "weather_main",
            "name": "OpenWeatherMap",
            "type": "weather",
            "enabled": True,
            "config": {"api_key": "demo", "location": "Moscow"},
            "credentials": {}
        })
        
        print("‚úÖ Spotify")
        print("‚úÖ Weather API")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        voice_manager = None
        if config.voice.enabled:
            print("\nüé§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
            
            try:
                from ..voice import VoiceManager
                from ..voice.manager import VoiceConfig
                from ..voice.stt import STTProvider
                from ..voice.tts import TTSProvider
                from ..voice.wake_word import WakeWordProvider
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                voice_config = VoiceConfig(
                    # STT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    stt_provider=STTProvider.GOOGLE if config.voice.stt_engine == "google" 
                                else STTProvider.WHISPER_LOCAL if config.voice.stt_engine == "whisper"
                                else STTProvider.VOSK,
                    stt_language=config.voice.stt_language,
                    stt_model="base",
                    
                    # TTS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    tts_provider=TTSProvider.PYTTSX3 if config.voice.tts_engine == "pyttsx3"
                                else TTSProvider.GOOGLE_TTS,
                    tts_language=config.voice.tts_language,
                    tts_rate=config.voice.tts_voice_rate,
                    tts_volume=1.0,
                    
                    # Wake Word –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    wake_word_provider=WakeWordProvider.SIMPLE_STT,
                    wake_words=["–ø—Ä–∏–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "–æ–∫–µ–π –¥–æ–º", "—ç–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"],
                    wake_word_sensitivity=0.5,
                    
                    # API –∫–ª—é—á–∏
                    openai_api_key=config.ai.openai_api_key
                )
                
                # –°–æ–∑–¥–∞–µ–º Voice Manager
                voice_manager = VoiceManager(
                    config=voice_config,
                    reasoning_engine=reasoning_engine,
                    event_system=event_system
                )
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
                if await voice_manager.initialize():
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                    if await voice_manager.start():
                        print("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω")
                        print(f"   üéôÔ∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(voice_config.wake_words)}")
                        print(f"   üó£Ô∏è STT: {voice_config.stt_provider.value}")
                        print(f"   üîä TTS: {voice_config.tts_provider.value}")
                    else:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
                        voice_manager = None
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É")
                    voice_manager = None
                    
            except ImportError as e:
                print(f"‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {e}")
                print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install 'home-assistant-ai[voice]'")
                voice_manager = None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
                voice_manager = None
        else:
            print("\nüîá –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º voice_manager –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app.state.voice_manager = voice_manager
        
        print(f"\nüöÄ Home Assistant AI –∑–∞–ø—É—â–µ–Ω!")
        print(f"üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://{config.api.host}:{config.api.port}/docs")
        print(f"üí¨ –ß–∞—Ç API: http://{config.api.host}:{config.api.port}/chat")
        print(f"üè† –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: http://{config.api.host}:{config.api.port}/devices")
        print(f"üìä –°—Ç–∞—Ç—É—Å: http://{config.api.host}:{config.api.port}/status")
        
        if voice_manager:
            print(f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π API: http://{config.api.host}:{config.api.port}/voice/status")
        
        print("\nüí° –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:")
        print("  - –í–∫–ª—é—á–∏ —Å–≤–µ—Ç")
        print("  - –ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?")
        print("  - –í–∫–ª—é—á–∏ –º—É–∑—ã–∫—É")
        print("  - –ß—Ç–æ —É–º–µ–µ—à—å?")
        
        # –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞
        config_uvicorn = uvicorn.Config(
            app,
            host=config.api.host,
            port=config.api.port,
            reload=config.api.reload,
            log_level="info" if not config.debug else "debug"
        )
        
        server = uvicorn.Server(config_uvicorn)
        
        # Graceful shutdown
        try:
            await server.serve()
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Home Assistant AI...")
            await lifecycle_manager.shutdown()
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", error=str(e))
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")